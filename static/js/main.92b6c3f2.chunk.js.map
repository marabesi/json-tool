{"version":3,"sources":["components/JsonEditor.tsx","core/cleanUp.ts","core/formatter.ts","components/InputText.tsx","components/Button.tsx","components/ResultMenu.tsx","components/JsonMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["JsonEditor","input","onChange","className","rest","defaultValue","value","join","style","fontSize","backgroundColor","fullConfig","theme","gray","overflowY","fontFamily","height","extensions","json","basicSetup","foldGutter","syntaxHighlighting","history","highlightActiveLine","autocompletion","closeBrackets","CleanUp","IS_INSIDE_JSON_VALUE","ENDED_JSON_PAIR_KEY_VALUE","STARTED_INSIDE_JSON_KEY","DOUBLE_QUOTES","originalJson","this","cleanUpJsonFrom","withoutSpaces","cleanWhiteSpaces","cleanNewLines","stringToClean","cleanString","stack","i","length","current","push","fmt2json","require","Formatter","rawJson","spacing","expand","escape","indent","formatted","result","inputText","classes","trim","type","eventValue","target","Button","children","ResultMenu","updateSpacing","writeToClipboard","cleanNewLinesAndSpaces","onClick","JsonMenu","pasteFromClipboard","cleanup","cleanUp","Header","href","rel","App","useState","setOriginalResult","setResult","error","setError","setSpacing","onJsonChange","useCallback","JSON","parse","e","format","parseSpacing","parseInt","isNaN","useEffect","navigator","clipboard","read","clipboardItems","clipboardItem","types","getType","blob","text","writeText","EditorContainer","newSpacing","withoutNewLines","withoutSpacesAndNewLines","cleanWhiteSpacesAndNewLines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mkrCAiBe,SAASA,EAAT,GAAqE,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,UAAcC,EAAe,iBAQjF,OACI,qCACI,0BAAU,4BAAoBA,EAAK,gBAAkBD,UAAU,SAASE,aAAcJ,IACtF,cAAC,IAAD,aACIK,MAAOL,EACPC,SAZS,SAACI,GAChBJ,GACFA,EAAS,CAAEI,SAGd,EAQWH,UAAW,CAACA,EAAW,UAAUI,KAAK,KACtCC,MAAO,CACHC,SAAU,GACVC,gBAAiBC,IAAWC,MAAMF,gBAAgBG,KAAK,KACvDC,UAAW,SACXC,WAAY,gFAEhBC,OAAO,OACPC,WAAY,CAACC,eACbC,WAAY,CACRC,YAAY,EACZC,oBAAoB,EACpBC,SAAS,EACTC,qBAAqB,EACrBC,gBAAgB,EAChBC,eAAe,IAEfrB,MAIjB,C,kBCpDoBsB,E,iDAEXC,qBAA+B,E,KAC/BC,0BAAoC,E,KACpCC,wBAAkC,E,KAClCC,cAAwB,G,qDAEhC,SAAiBC,GACf,OAAOC,KAAKC,gBAAgB,IAAKF,EAClC,G,2BAED,SAAcA,GACZ,OAAOC,KAAKC,gBAAgB,KAAMF,EACnC,G,yCAED,SAA4BA,GAC1B,IAAMG,EAAgBF,KAAKG,iBAAiBJ,GAC5C,OAAOC,KAAKI,cAAcF,EAC3B,G,6BAED,SAAwBG,EAAuBN,GAI7C,IAHA,IAAIO,EAAc,GACdC,EAAQ,GAEHC,EAAI,EAAGA,EAAIT,EAAaU,OAAQD,IAAK,CAC5C,IAAME,EAAUX,EAAaS,GAEzBE,IAAYV,KAAKF,eACnBS,EAAMI,KAAKD,IAGTH,EAAME,SAAWT,KAAKH,yBAA2BU,EAAME,SAAWT,KAAKL,sBAGrEe,IAAYL,KAFhBC,GAAeP,EAAaS,IAO1BD,EAAME,SAAWT,KAAKJ,4BACxBW,EAAQ,GAEX,CAED,OAAOD,CACR,K,KC7CGM,EAAWC,EAAQ,IAEJC,E,WACnB,WAAoBC,GAA+C,IAAtBC,EAAqB,uDAAH,EAAG,yBAA9CD,UAA8C,KAArBC,SAAwB,C,2FAErE,8GAC0BJ,EAASZ,KAAKe,QAAS,CAC7CE,QAAQ,EACRC,QAAQ,EACRC,OAAQnB,KAAKgB,UAJjB,cACQI,EADR,yBAMSA,EAAUC,QANnB,gD,gGCCa,SAASC,EAAT,GAA6E,IAAxDhD,EAAuD,EAAvDA,MAAOJ,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,UAAcC,EAAwB,iBACnFmD,EAAU,CAACpD,EAAW,iBAAkB,IAAII,KAAK,KAAKiD,OAC5D,OACE,mCACEC,KAAK,OACLnD,MAAOA,EACPH,UAAWoD,EACXrD,SAAU,SAAAwD,GAAU,OAAIxD,EAAWA,EAASwD,EAAWC,OAAOrD,OAAS,IAAnD,GAChBF,GAGT,C,+BCTc,SAASwD,EAAT,GAAgE,IAA9CC,EAA6C,EAA7CA,SAAU1D,EAAmC,EAAnCA,UAAcC,EAAqB,iBAC5E,OACE,gDACED,UAAW,CAAC,uFAAwFA,GAAWI,KAAK,MAChHH,GAFN,aAIGyD,IAGN,C,YCbc,SAASC,EAAT,GAEZ,IADGd,EACJ,EADIA,QAASe,EACb,EADaA,cAAeC,EAC5B,EAD4BA,iBAAkB7B,EAC9C,EAD8CA,iBAAkBC,EAChE,EADgEA,cAAe6B,EAC/E,EAD+EA,uBAE7E,OACI,sBAAK9D,UAAU,sDAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,sBAAMA,UAAU,OAAhB,8BACA,cAAC,EAAD,CACI,cAAY,aACZA,UAAU,oBACVG,MAAO0C,EACP9C,SAAU,SAAAwD,GAAU,OAAIK,EAAcL,EAAlB,OAG5B,eAACE,EAAD,CACIM,QAAS/B,EACT,cAAY,eACZhC,UAAU,oBAHd,UAKI,cAAC,IAAD,CAAaA,UAAU,SAL3B,kBAQA,eAACyD,EAAD,CACIM,QAAS9B,EACT,cAAY,kBACZjC,UAAU,oBAHd,UAKI,cAAC,IAAD,CAAYA,UAAU,SAL1B,qBAQA,eAACyD,EAAD,CACIM,QAASD,EACT,cAAY,6BACZ9D,UAAU,oBAHd,UAKI,cAAC,IAAD,CAAeA,UAAU,SAL7B,gCASA,eAACyD,EAAD,CACI,cAAY,YACZM,QAASF,EACT7D,UAAU,oBAHd,UAKI,cAAC,IAAD,CAAWA,UAAU,SALzB,iBAUX,CClDc,SAASgE,EAAT,GAAuD,IAApCC,EAAmC,EAAnCA,mBAAoBC,EAAe,EAAfA,QAClD,OACI,sBAAKlE,UAAU,kDAAf,UACI,eAACyD,EAAD,CACIM,QAASE,EACT,cAAY,uBACZjE,UAAU,yBAHd,UAKI,cAAC,IAAD,CAAgBA,UAAU,SAL9B,0BAQA,eAACyD,EAAD,CACIM,QAASG,EACT,cAAY,QACZlE,UAAU,oBAHd,UAKI,cAAC,IAAD,CAAeA,UAAU,SAL7B,kBAUX,CChBD,IAAMmE,EAAU,IAAI5C,EAEpB,SAAS6C,IACP,OAAO,sBAAKpE,UAAU,kDAAf,UACL,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,4BAAd,uBADF,KAEE,mBAAGqE,KAAK,wCAAwCb,OAAO,SAASc,IAAI,aAApE,4BAEF,oBAAGtE,UAAU,oBAAoB,cAAY,kBAAkBqE,KAAK,wCAAwCb,OAAO,SAASc,IAAI,aAAhI,UACE,cAAC,IAAD,CAAUtE,UAAU,SACpB,wDAGL,CAyHcuE,MAvHf,WACE,MAA0CC,mBAAiB,IAA3D,mBAAO5C,EAAP,KAAqB6C,EAArB,KACA,EAA4BD,mBAAiB,IAA7C,mBAAOtB,EAAP,KAAewB,EAAf,KACA,EAA0BF,mBAAiB,IAA3C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAiB,KAA/C,mBAAO3B,EAAP,KAAgBgC,EAAhB,KAEMC,EAAeC,sBAAW,iDAAC,WAAO5E,GAAP,wFAC/ByE,EAAS,IAEJ/B,EAH0B,iDAK/B,IACM1C,GACF6E,KAAKC,MAAM9E,EAId,CAFC,MAAO+E,GACPN,EAAS,eACV,CAX8B,OAa3BO,EAAS,IAAIxC,EAAUxC,EAAO,GAE5BiF,EAAeC,SAASxC,GACzByC,MAAMF,KACTD,EAAS,IAAIxC,EAAUxC,EAAOiF,IAjBD,SAoBVD,EAAOA,SApBG,OAoBzBjC,EApByB,OAsB/BuB,EAAkBtE,GAClBuE,EAAUxB,GAvBqB,4CAAD,sDAwB7B,CAACL,IAEJ0C,qBAAU,WACRT,EAAalD,EACd,GAAE,CAACiB,EAASjB,EAAckD,IAE3B,IAAMb,EAAkB,iDAAG,8HACIuB,UAAUC,UAAUC,OADxB,OACnBC,EADmB,qBAEGA,GAFH,yDAEdC,EAFc,sBAGJA,EAAcC,OAHV,iEAGZvC,EAHY,kBAIFsC,EAAcE,QAAQxC,GAJpB,eAIfyC,EAJe,iBAKFA,EAAKC,OALH,eAKfA,EALe,iBAMflB,EAAakB,GANE,4VAAH,qDAWlB9B,EAAO,iDAAG,wGACRY,EAAa,IADL,2CAAH,qDAIPjB,EAAgB,iDAAG,wGACjB2B,UAAUC,UAAUQ,UAAU/C,GADb,2CAAH,qDAqBtB,OACI,sBAAKlD,UAAU,qCAAf,UACE,cAACoE,EAAD,IACA,sBAAKpE,UAAU,kBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,eAACkG,EAAD,WACE,cAAClC,EAAD,CACIC,mBAAoBA,EACpBC,QAASA,IAGb,cAACrE,EAAD,CACIC,MAAO8B,EACP7B,SAAU,SAAAwD,GAAU,OAAIuB,EAAavB,EAAWpD,MAA5B,EACpB,cAAY,YAGlB,eAAC+F,EAAD,WACI,cAACvC,EAAD,CACId,QAASA,EACTe,cAtBI,SAACuC,GAAD,OAAwBtB,EAAWsB,EAAnC,EAuBJtC,iBAAkBA,EAClB7B,iBAvCO,WACvB,IAAMD,EAAgBoC,EAAQnC,iBAAiBJ,GAC/C8C,EAAU3C,EACX,EAqCiBE,cAnCI,WACpB,IAAMmE,EAAkBjC,EAAQlC,cAAcL,GAC9C8C,EAAU0B,EACX,EAiCiBtC,uBA/Ba,WAC7B,IAAMuC,EAA2BlC,EAAQmC,4BAA4B1E,GACrE8C,EAAU2B,EACX,IA+Ba,cAACxG,EAAD,CACIC,MAAOoD,EACPlD,UAAU,SACV,cAAY,iBAItB,qBAAKA,UAAU,6CAAf,SACG2E,GAAS,mBAAG,cAAY,QAAf,SAAwBA,SAGtC,qBAAK3E,UAAU,kCAAf,SACE,mBAAGqE,KAAK,6DAA6Db,OAAO,SAASc,IAAI,aAAzF,mCAMT,EAID,SAAS4B,EAAT,GAA6C,IAAlBxC,EAAiB,EAAjBA,SACzB,OACI,qBAAK1D,UAAU,iCAAf,SACG0D,GAGR,CCpJD,IAYe6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,E,MCNDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.92b6c3f2.chunk.js","sourcesContent":["import CodeMirror from '@uiw/react-codemirror';\nimport fullConfig from '../tailwindResolver';\nimport { json } from '@codemirror/lang-json';\n\ntype Event = {\n  value: string;\n};\n\ntype EventChange = (event: Event) => void;\n\ninterface Props{\n  input: string;\n  className?: string;\n  onChange?: EventChange;\n  'data-testid': string;\n}\n\nexport default function JsonEditor({ input, onChange, className, ...rest }: Props) {\n  const handleChange = (value: string) => {\n    if (onChange) {\n      onChange({ value });\n      return;\n    }\n  };\n\n  return (\n      <>\n          <textarea data-testid={`raw-${rest['data-testid']}`} className=\"hidden\" defaultValue={input}></textarea>\n          <CodeMirror\n              value={input}\n              onChange={handleChange}\n              className={[className, 'h-full'].join(' ')}\n              style={{\n                  fontSize: 12,\n                  backgroundColor: fullConfig.theme.backgroundColor.gray['200'],\n                  overflowY: 'scroll',\n                  fontFamily: 'ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace',\n              }}\n              height=\"100%\"\n              extensions={[json()]}\n              basicSetup={{\n                  foldGutter: true,\n                  syntaxHighlighting: true,\n                  history: false,\n                  highlightActiveLine: false,\n                  autocompletion: false,\n                  closeBrackets: false,\n              }}\n              {...rest}\n          />\n      </>\n  );\n}\n","export default class CleanUp {\n\n  private IS_INSIDE_JSON_VALUE: number = 3;\n  private ENDED_JSON_PAIR_KEY_VALUE: number = 4;\n  private STARTED_INSIDE_JSON_KEY: number = 1;\n  private DOUBLE_QUOTES: string = '\"';\n\n  cleanWhiteSpaces(originalJson: string): string {\n    return this.cleanUpJsonFrom(' ', originalJson);\n  }\n\n  cleanNewLines(originalJson: string): string {\n    return this.cleanUpJsonFrom('\\n', originalJson);\n  }\n\n  cleanWhiteSpacesAndNewLines(originalJson: string): string {\n    const withoutSpaces = this.cleanWhiteSpaces(originalJson);\n    return this.cleanNewLines(withoutSpaces);\n  }\n\n  private cleanUpJsonFrom(stringToClean: string, originalJson: string) {\n    let cleanString = '';\n    let stack = [];\n\n    for (let i = 0; i < originalJson.length; i++) {\n      const current = originalJson[i];\n\n      if (current === this.DOUBLE_QUOTES) {\n        stack.push(current);\n      }\n\n      if (stack.length === this.STARTED_INSIDE_JSON_KEY || stack.length === this.IS_INSIDE_JSON_VALUE) {\n        cleanString += originalJson[i];\n      } else {\n        if (current !== stringToClean) {\n          cleanString += originalJson[i];\n        }\n      }\n\n      if (stack.length === this.ENDED_JSON_PAIR_KEY_VALUE) {\n        stack = [];\n      }\n    }\n\n    return cleanString;\n  }\n}","const fmt2json = require('format-to-json');\n\nexport default class Formatter {\n  constructor(private rawJson: string, private spacing: number = 2) { }\n\n  async format(): Promise<string> {\n    const formatted = await fmt2json(this.rawJson, {\n      expand: true,\n      escape: false,\n      indent: this.spacing\n    });\n    return formatted.result;\n  }\n}","type InputTextProps = {\n  onChange?: (value: string) => void;\n  value?: string\n  className?: string\n}\n\nexport default function inputText({ value, onChange, className, ...rest }: InputTextProps) {\n  const classes = [className, 'text-black p-1', ''].join(' ').trim();\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      className={classes}\n      onChange={eventValue => onChange ? onChange(eventValue.target.value) : null}\n      {...rest}\n    />\n  );\n}\n","import { DetailedHTMLProps, ReactNode } from 'react';\n\ntype ButtonProps = {\n  onClick?: DetailedHTMLProps<any, any>\n  children?: ReactNode\n  className?: string\n}\n\nexport default function Button({ children, className, ...rest }: ButtonProps) {\n  return(\n    <button\n      className={['bg-transparent border-0 text-white cursor-pointer p-2 outline-none hover:bg-gray-800', className].join(' ')}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n","import InputText from \"./InputText\";\nimport Button from \"./Button\";\nimport {FaBackspace, FaRegCopy, FaTerminal, FaUserFriends} from \"react-icons/fa\";\n\nexport default function ResultMenu(\n    { spacing, updateSpacing, writeToClipboard, cleanWhiteSpaces, cleanNewLines, cleanNewLinesAndSpaces } : any\n) {\n    return (\n        <div className=\"flex justify-start items-center m-2 ml-0 text-white\">\n            <div className=\"flex items-center\">\n                <span className=\"mr-2\">Space tabulation</span>\n                <InputText\n                    data-testid=\"space-size\"\n                    className=\"w-10 rounded mr-2\"\n                    value={spacing}\n                    onChange={eventValue => updateSpacing(eventValue)}\n                />\n            </div>\n            <Button\n                onClick={cleanWhiteSpaces}\n                data-testid=\"clean-spaces\"\n                className=\"flex items-center\"\n            >\n                <FaBackspace className=\"mr-2\" />\n                Clean spaces\n            </Button>\n            <Button\n                onClick={cleanNewLines}\n                data-testid=\"clean-new-lines\"\n                className=\"flex items-center\"\n            >\n                <FaTerminal className=\"mr-2\" />\n                Clean new lines\n            </Button>\n            <Button\n                onClick={cleanNewLinesAndSpaces}\n                data-testid=\"clean-new-lines-and-spaces\"\n                className=\"flex items-center\"\n            >\n                <FaUserFriends className=\"mr-2\" />\n                Clean new lines and spaces\n            </Button>\n\n            <Button\n                data-testid=\"copy-json\"\n                onClick={writeToClipboard}\n                className=\"flex items-center\"\n            >\n                <FaRegCopy className=\"mr-2\" />\n                Copy json\n            </Button>\n        </div>\n    );\n}\n","import Button from \"./Button\";\nimport {FaRegClipboard, FaRegTrashAlt} from \"react-icons/fa\";\n\nexport default function JsonMenu({pasteFromClipboard, cleanup}: any) {\n    return (\n        <div className=\"flex w-full justify-start items-center m-2 ml-0\">\n            <Button\n                onClick={pasteFromClipboard}\n                data-testid=\"paste-from-clipboard\"\n                className=\"ml-0 flex items-center\"\n            >\n                <FaRegClipboard className=\"mr-2\" />\n                Paste from clipboard\n            </Button>\n            <Button\n                onClick={cleanup}\n                data-testid=\"clean\"\n                className=\"flex items-center\"\n            >\n                <FaRegTrashAlt className=\"mr-2\" />\n                Delete all\n            </Button>\n        </div>\n    );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport JsonEditor from './components/JsonEditor';\nimport CleanUp from './core/cleanUp';\nimport Formatter from './core/formatter';\nimport ResultMenu from \"./components/ResultMenu\";\nimport JsonMenu from \"./components/JsonMenu\";\nimport {FaCoffee} from \"react-icons/fa\";\n\nconst cleanUp = new CleanUp();\n\nfunction Header() {\n  return <div className=\"bg-blue-900 flex justify-between p-5 text-white\">\n    <div className=\"flex\">\n      <h2 className=\"text-yellow-400 font-bold\">JSON tool</h2> |\n      <a href=\"https://github.com/marabesi/json-tool\" target=\"_blank\" rel=\"noreferrer\">by marabesi</a>\n    </div>\n    <a className=\"flex items-center\" data-testid=\"buy-me-a-coffee\" href=\"https://www.buymeacoffee.com/marabesi\" target=\"_blank\" rel=\"noreferrer\">\n      <FaCoffee className=\"mr-2\"/>\n      <span>Buy me a coffee</span>\n    </a>\n  </div>;\n}\n\nfunction App() {\n  const [originalJson, setOriginalResult] = useState<string>('');\n  const [result, setResult] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [spacing, setSpacing] = useState<string>('2');\n\n  const onJsonChange = useCallback(async (value: string) => {\n    setError('');\n\n    if (!spacing) return;\n\n    try {\n      if (value) {\n        JSON.parse(value);\n      }\n    } catch (e: any) {\n      setError('invalid json');\n    }\n\n    let format = new Formatter(value, 2);\n\n    const parseSpacing = parseInt(spacing);\n    if (!isNaN(parseSpacing)) {\n      format = new Formatter(value, parseSpacing);\n    }\n\n    const result = await format.format();\n\n    setOriginalResult(value);\n    setResult(result);\n  }, [spacing]);\n\n  useEffect(() => {\n    onJsonChange(originalJson);\n  }, [spacing, originalJson, onJsonChange]);\n\n  const pasteFromClipboard = async () => {\n    const clipboardItems = await navigator.clipboard.read();\n    for (const clipboardItem of clipboardItems) {\n      for (const type of clipboardItem.types) {\n        const blob = await clipboardItem.getType(type);\n        const text = await blob.text();\n        await onJsonChange(text);\n      }\n    }\n  };\n\n  const cleanup = async () => {\n    await onJsonChange('');\n  };\n\n  const writeToClipboard = async () => {\n    await navigator.clipboard.writeText(result);\n  };\n\n  const cleanWhiteSpaces = () => {\n    const withoutSpaces = cleanUp.cleanWhiteSpaces(originalJson);\n    setResult(withoutSpaces);\n  };\n\n  const cleanNewLines = () => {\n    const withoutNewLines = cleanUp.cleanNewLines(originalJson);\n    setResult(withoutNewLines);\n  };\n\n  const cleanNewLinesAndSpaces = () => {\n    const withoutSpacesAndNewLines = cleanUp.cleanWhiteSpacesAndNewLines(originalJson);\n    setResult(withoutSpacesAndNewLines);\n  };\n\n  const updateSpacing = (newSpacing: string) => setSpacing(newSpacing);\n\n  return (\n      <div className=\"bg-gray-500 flex flex-col h-screen\">\n        <Header />\n        <div className=\"p-1 mb-8 h-full\">\n          <div className=\"flex h-full\">\n            <EditorContainer>\n              <JsonMenu\n                  pasteFromClipboard={pasteFromClipboard}\n                  cleanup={cleanup}\n              />\n\n              <JsonEditor\n                  input={originalJson}\n                  onChange={eventValue => onJsonChange(eventValue.value)}\n                  data-testid=\"json\"\n              />\n            </EditorContainer>\n            <EditorContainer>\n                <ResultMenu\n                    spacing={spacing}\n                    updateSpacing={updateSpacing}\n                    writeToClipboard={writeToClipboard}\n                    cleanWhiteSpaces={cleanWhiteSpaces}\n                    cleanNewLines={cleanNewLines}\n                    cleanNewLinesAndSpaces={cleanNewLinesAndSpaces}\n                />\n\n                <JsonEditor\n                    input={result}\n                    className=\"result\"\n                    data-testid=\"result\"\n                />\n            </EditorContainer>\n          </div>\n          <div className=\"bg-red-600 m-1 mt-2 text-center text-white\">\n            {error && <p data-testid=\"error\">{error}</p>}\n          </div>\n        </div>\n        <div className=\"flex bg-gray-300 text-white p-5\">\n          <a href=\"https://github.com/marabesi/json-tool/blob/main/LICENSE.md\" target=\"_blank\" rel=\"noreferrer\">\n            CC0 1.0 Universal\n          </a>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n\nfunction EditorContainer({ children }: any) {\n  return (\n      <div className=\"w-3/6 flex flex-col h-full m-1\">\n        {children}\n      </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}