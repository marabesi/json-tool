{"version":3,"sources":["components/Button.tsx","components/InputText.tsx","components/JsonEditor.tsx","components/Label.tsx","core/cleanUp.ts","core/formatter.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","children","className","rest","join","inputText","value","onChange","classes","trim","type","eventValue","target","JsonEditor","input","handleChange","language","placeholder","evn","padding","style","fontSize","backgroundColor","fullConfig","theme","gray","overflowY","fontFamily","Label","testId","CleanUp","IS_INSIDE_JSON_VALUE","ENDED_JSON_PAIR_KEY_VALUE","STARTED_INSIDE_JSON_KEY","DOUBLE_QUOTES","originalJson","this","cleanUpJsonFrom","withoutSpaces","cleanWhiteSpaces","cleanNewLines","stringToClean","cleanString","stack","i","length","current","push","fmt2json","require","Formatter","rawJson","spacing","a","expand","escape","indent","formatted","result","cleanUp","App","useState","setOriginalResult","setResult","error","setError","setSpacing","onJsonChange","useCallback","JSON","parse","e","format","parseSpacing","parseInt","isNaN","useEffect","pasteFromClipboard","navigator","clipboard","read","clipboardItems","clipboardItem","types","getType","blob","text","cleanup","writeToClipboard","writeText","href","rel","onClick","withoutNewLines","withoutSpacesAndNewLines","cleanWhiteSpacesAndNewLines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.555a1677.chunk.js","sourcesContent":["import { DetailedHTMLProps, ReactNode } from 'react';\n\ntype ButtonProps = {\n  onClick?: DetailedHTMLProps<any, any>\n  children?: ReactNode\n  className?: string\n}\n\nexport default function Button({ children, className, ...rest }: ButtonProps) {\n  return(\n    <button\n      className={['bg-white p-2 m-2', className].join(' ')}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n","type InputTextProps = {\n  onChange?: (value: string) => void;\n  value?: string\n  className?: string\n}\n\nexport default function inputText({ value, onChange, className, ...rest }: InputTextProps) {\n  const classes = [className, ''].join(' ').trim();\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      className={classes}\n      onChange={eventValue => onChange ? onChange(eventValue.target.value) : null}\n      {...rest}\n    />\n  );\n}\n","import CodeEditor from '@uiw/react-textarea-code-editor';\n\nimport fullConfig from '../tailwindResolver';\n\ntype Event = {\n  value: string;\n};\n\ntype EventChange = (event: Event) => void;\n\ninterface Props{\n  input: string;\n  className?: string;\n  onChange?: EventChange;\n}\n\nexport default function JsonEditor({ input, onChange, className, ...rest }: Props) {\n  const handleChange = (value: string) => {\n    if (onChange) {\n      onChange({ value });\n      return;\n    }\n  };\n\n  return (\n    <CodeEditor\n      value={input}\n      language=\"json\"\n      placeholder=\"\"\n      className={[className, 'h-full'].join(' ')}\n      onChange={(evn) => handleChange(evn.target.value)}\n      padding={15}\n      style={{\n        fontSize: 12,\n        backgroundColor: fullConfig.theme.backgroundColor.gray['200'],\n        overflowY: 'scroll',\n        fontFamily: 'ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace',\n      }}\n      {...rest}\n    />\n  );\n}\n","import { ReactNode } from 'react';\n\ninterface Props {\n  children?: ReactNode,\n  'data-testid'?: string\n}\n\nexport default function Label({ children, 'data-testid': testId }: Props) {\n  return (\n    <label\n      className=\"text-white\"\n      data-testid={testId}\n    >\n      {children}\n    </label>\n  );\n}","export default class CleanUp {\n\n  private IS_INSIDE_JSON_VALUE: number = 3;\n  private ENDED_JSON_PAIR_KEY_VALUE: number = 4;\n  private STARTED_INSIDE_JSON_KEY: number = 1;\n  private DOUBLE_QUOTES: string = '\"';\n\n  cleanWhiteSpaces(originalJson: string): string {\n    return this.cleanUpJsonFrom(' ', originalJson);\n  }\n\n  cleanNewLines(originalJson: string): string {\n    return this.cleanUpJsonFrom('\\n', originalJson);\n  }\n\n  cleanWhiteSpacesAndNewLines(originalJson: string): string {\n    const withoutSpaces = this.cleanWhiteSpaces(originalJson);\n    return this.cleanNewLines(withoutSpaces);\n  }\n\n  private cleanUpJsonFrom(stringToClean: string, originalJson: string) {\n    let cleanString = '';\n    let stack = [];\n\n    for (let i = 0; i < originalJson.length; i++) {\n      const current = originalJson[i];\n\n      if (current === this.DOUBLE_QUOTES) {\n        stack.push(current);\n      }\n\n      if (stack.length === this.STARTED_INSIDE_JSON_KEY || stack.length === this.IS_INSIDE_JSON_VALUE) {\n        cleanString += originalJson[i];\n      } else {\n        if (current !== stringToClean) {\n          cleanString += originalJson[i];\n        }\n      }\n\n      if (stack.length === this.ENDED_JSON_PAIR_KEY_VALUE) {\n        stack = [];\n      }\n    }\n\n    return cleanString;\n  }\n}","const fmt2json = require('format-to-json');\n\nexport default class Formatter {\n  constructor(private rawJson: string, private spacing: number = 2) { }\n\n  async format(): Promise<string> {\n    const formatted = await fmt2json(this.rawJson, {\n      expand: true,\n      escape: false,\n      indent: this.spacing\n    });\n    return formatted.result;\n  }\n}","import { useCallback, useEffect, useState } from 'react';\nimport Button from './components/Button';\nimport InputText from './components/InputText';\nimport JsonEditor from './components/JsonEditor';\nimport Label from './components/Label';\nimport CleanUp from './core/cleanUp';\nimport Formatter from './core/formatter';\n\nconst cleanUp = new CleanUp();\n\nfunction App() {\n  const [originalJson, setOriginalResult] = useState<string>('');\n  const [result, setResult] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [spacing, setSpacing] = useState<string>('2');\n\n  const onJsonChange = useCallback(async (value: string) => {\n    setError('');\n\n    if (!spacing) return;\n\n    try {\n      if (value) {\n        JSON.parse(value);\n      }\n    } catch (e: any) {\n      setError('invalid json');\n    }\n\n    let format = new Formatter(value, 2);\n\n    const parseSpacing = parseInt(spacing);\n    if (!isNaN(parseSpacing)) {\n      format = new Formatter(value, parseSpacing);\n    }\n\n    const result = await format.format();\n\n    setOriginalResult(value);\n    setResult(result);\n  }, [spacing]);\n\n  useEffect(() => {\n    onJsonChange(originalJson);\n  }, [spacing, originalJson, onJsonChange]);\n\n  const pasteFromClipboard = async () => {\n    const clipboardItems = await navigator.clipboard.read();\n    for (const clipboardItem of clipboardItems) {\n      for (const type of clipboardItem.types) {\n        const blob = await clipboardItem.getType(type);\n        await onJsonChange(await blob.text());\n      }\n    }\n  };\n\n  const cleanup = async () => {\n    await onJsonChange('');\n  };\n\n  const writeToClipboard = async () => {\n    await navigator.clipboard.writeText(result);\n  };\n\n  const cleanWhiteSpaces = () => {\n    const withoutSpaces = cleanUp.cleanWhiteSpaces(originalJson);\n    setResult(withoutSpaces);\n  };\n\n  const cleanNewLines = () => {\n    const withoutNewLines = cleanUp.cleanNewLines(originalJson);\n    setResult(withoutNewLines);\n  };\n\n  const cleanNewLinesAndSpaces = () => {\n    const withoutSpacesAndNewLines = cleanUp.cleanWhiteSpacesAndNewLines(originalJson);\n    setResult(withoutSpacesAndNewLines);\n  };\n\n  const updateSpacing = (newSpacing: string) => setSpacing(newSpacing);\n\n  return (\n    <div className=\"h-screen bg-gray-500 p-5\">\n      <a data-testid=\"buy-me-a-coffee\" href=\"https://www.buymeacoffee.com/marabesi\" target=\"_blank\" rel=\"noreferrer\">Buy me a coffee</a>\n      <div className=\"flex w-full justify-start items-center\">\n        <div className=\"w-3/6\">\n          <Button\n            onClick={pasteFromClipboard}\n            data-testid=\"paste-from-clipboard\"\n            className=\"ml-0\"\n          >\n            paste from clipboard\n          </Button>\n          <Button\n            onClick={cleanup}\n            data-testid=\"clean\"\n          >\n            clean\n          </Button>\n          <Button\n            onClick={cleanWhiteSpaces}\n            data-testid=\"clean-spaces\"\n          >\n            clean spaces\n          </Button>\n          <Button\n            onClick={cleanNewLines}\n            data-testid=\"clean-new-lines\"\n          >\n            clean new lines\n          </Button>\n          <Button\n            onClick={cleanNewLinesAndSpaces}\n            data-testid=\"clean-new-lines-and-spaces\"\n          >\n            clean new lines and spaces\n          </Button>\n        </div>\n        <div className=\"w-3/6 flex justify-between\">\n          <InputText\n            data-testid=\"space-size\"\n            value={spacing}\n            onChange={eventValue => updateSpacing(eventValue)}\n          />\n          <Button\n            data-testid=\"copy-json\"\n            onClick={writeToClipboard}\n          >\n            copy json\n          </Button>\n        </div>\n      </div>\n      <div className=\"flex h-5/6\">\n        <div className=\"w-3/6 flex flex-col h-full m-1\">\n          <Label data-testid=\"label-json\">place your json here</Label>\n          <JsonEditor\n            input={originalJson}\n            onChange={eventValue => onJsonChange(eventValue.value)}\n            data-testid=\"json\"\n          />\n        </div>\n        <div className=\"w-3/6 flex flex-col h-full m-1\">\n          <Label data-testid=\"label-result\">result</Label>\n          <JsonEditor\n            input={result}\n            className=\"result\"\n            data-testid=\"result\"\n          />\n        </div>\n      </div>\n      <div className=\"bg-red-600 m-1 text-center text-white\">\n        {error && <p data-testid=\"error\">{error}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}